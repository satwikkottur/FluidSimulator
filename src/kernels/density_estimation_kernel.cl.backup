#include "structs/structures.h"
//#define poly6(x) 1.5667 * pow(1-x*x, 3)

__kernel void density_estimation(__global struct Particle* P, __global int* voxelInd){
    //Get the index of the current element to be processed
    int i = get_global_id(0);

 
    //Finding the neighbours on the basis on position of particle
    //int xInd = P[i].voxelId % noVoxelX;
    //int yInd = ((P[i].voxelId - xInd)/noVoxelX) % noVoxelY;
    //int zInd = (P[i].voxelId - xInd - yInd * noVoxelX) / (noVoxelX * noVoxelY);

    //Generating neighbour voxels
    int nbrs[8];

    float voxelPartX = ((float)P[i].pos.x / voxelSize); 
    float voxelPartY = ((float)P[i].pos.y / voxelSize); 
    float voxelPartZ = ((float)P[i].pos.z / voxelSize); 
    voxelPartX = voxelPartX - (int)voxelPartX;
    voxelPartY = voxelPartY - (int)voxelPartY;
    voxelPartZ = voxelPartZ - (int)voxelPartZ;

    int offsetX = (voxelPartX > 0.5)? 1 : -1;
    int offsetY = (voxelPartY > 0.5)? noVoxelX : -1 * noVoxelX;
    int offsetZ = (voxelPartZ > 0.5)? noVoxelX * noVoxelY : -1 * noVoxelX * noVoxelY;

    for(int j = 0; j < 8; j++){
        nbrs[j] = P[i].voxelId + (j&1)*offsetX + ((j>>1)&1)*offsetY + ((j>>2)&1)*offsetZ;
    }
    
    float density = 0;
    float distSquared;
    float diffX, diffY, diffZ;
    int count = 0;
    //Evaluating the kernel for each voxel
    for(int j = 0; j < 8; j++){
        if(nbrs[j] < 0 || nbrs[j] > noVoxels) continue;
        int nbrStartIndex = voxelInd[nbrs[j]];
        if(nbrStartIndex == -1) continue;
        if(nbrStartIndex < 0 || nbrStartIndex > N) continue;
        for(int k = nbrStartIndex ;; k++){
            if(P[k].voxelId != nbrs[j]) break;
            //distSquared = distSq(P[i].pos, P[k].pos);
            diffX = (P[i].pos.x - P[k].pos.x);
            diffY = (P[i].pos.y - P[k].pos.y);
            diffX = (P[i].pos.z - P[k].pos.z);
            distSquared = diffX * diffX + diffY * diffY + diffZ * diffZ;
            if(distSquared <= 1){
                //density += 1.0;
                density += 1.5667 * (1 - distSquared) * (1 - distSquared) * (1 - distSquared);
            }
        }
    }
    P[i].density = density;
    return;
}

